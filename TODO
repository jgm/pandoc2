TODO:
Markdown syntax extensions:
x reference notes parser
x fenced code blocks
x fancy list numbers
x tex math
x non-strict treatment of html
x definition lists - tight/loose distinction, test
x move para-to-plain transform for all lists to markdown,
  remove tight list attribute
x header identifiers
x tex math output (mathml)
x super/subscript
x plain math output

_ should writer be in a PMonad?
  this would allow calls to e.g. external highlighting programs
  also warning messages
  natural to chain together reader and writer using >>=

_ markdown parsing for super/subscript
_ markdown strikeout
_ tests for math
_ tests for super/subscript
_ tests for fenced code blocks
_ tests for HTML bolcks with markdown

_ example lists - possibly rethink syntax to avoid clash w/ citations?
  (use ! instead of @)

_ inline tex
_ tables - use structure with cell combinators?
  cell (2 `x` 3) contents <> ( cell (1 `x` 1) z ^^^ cell (1 `x` 1) y )

_ citations
_ picture captions? - improve
_ title block/metadata - rethink?
_ highlighting
_ tex math macros (do generic tex parsers first, can't easily reuse
   parser from texmath because it operates on a string)
_ other math formats
_ comments?
_ anchors?

Other writers
Other readers
Templates - better to use something standard?

Example lists:

##.  blah
##.  blah
#foo#.  blah
#bar#.  baz
(#bar#)  my example

See (#bar#) for an example.

##foo.  blah
##bar.  baz
(##bar)  my example

See (##bar) for an example.

!.  bim
!foo.  blah
!bar.  baz
(!bar)  my example

See (!bar) for an example.

---

Maybe ! should be used for generic labels.

# My header                   !my-header

In section !my-header,

internal link:
[See section !my](!my)

---

Definition lists - keep old syntax, but it's SLOW to parse.
Benchmark goes from .351 to .46 just adding the definition
lists.  Think of ways to speed up?

